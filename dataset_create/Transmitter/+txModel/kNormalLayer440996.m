classdef kNormalLayer440996 < nnet.layer.Layer & nnet.layer.Formattable & ...
        nnet.layer.AutogeneratedFromTensorFlow & nnet.layer.Acceleratable
    %kNormalLayer440996
    % Auto-generated by MATLAB on 18-Dec-2024 16:36:11
    
    
    properties
        % Non Trainable Parameters
        
    end
    
    properties (Learnable)
        % Trainable parameters
        
    end
    
    properties (Hidden)
        % Code literals
        
        InputLabels
        OutputLabels
        IsTraining
    end
    
    methods
        function obj = kNormalLayer440996(Name, Type)
            obj.Name = Name;
            obj.Type = Type;
            obj.IsTraining = false;
            obj.NumInputs = 1;
            obj.NumOutputs = 1;
            obj.InputLabels = {''};
            obj.OutputLabels = {''};
        end
        
        function varargout = predict(obj, input)
            import txModel.ops.*;
            obj.InputLabels{1} = input.dims;
            
            input = iPermuteToReverseTF(input, 3);
            temp{1} = NormalLayer440996(input, obj);
            
            % Extract results from function call.
            temp{1} = addOutputLabel(temp{1}, 1, obj);
            varargout{1} = iPermuteToForwardTF(temp{1}.value, temp{1}.rank);
        end
        
        function varargout = forward(obj, input)
            obj.IsTraining = true;
            import txModel.ops.*;
            obj.InputLabels{1} = input.dims;
            
            input = iPermuteToReverseTF(input, 3);
            temp{1} = NormalLayer440996(input, obj);
            
            % Extract results from function call.
            temp{1} = addOutputLabel(temp{1}, 1, obj);
            varargout{1} = iPermuteToForwardTF(temp{1}.value, temp{1}.rank);
        end
    end
end

function [identity] = NormalLayer440996(input, obj)
import txModel.ops.*;

input = struct('value', input, 'rank', 3);

l2NormalizeSquare = struct('value', power(input.value, 2), 'rank', 3);
l2NormalizeSumReductionIndices = struct('value', double(-1), 'rank', 0);
l2NormalizeSum = tfSum(l2NormalizeSquare, l2NormalizeSumReductionIndices, true);
l2NormalizeMaximumY = struct('value', single(1e-06), 'rank', 0);
l2NormalizeMaximum = tfMaximum(l2NormalizeSum, l2NormalizeMaximumY);
l2NormalizeRsqrt = struct('value', sqrt(1./(l2NormalizeMaximum.value)), 'rank', 3);
l2Normalize = tfMul(input, l2NormalizeRsqrt);
Identity = struct('value', l2Normalize.value, 'rank', 3);

% assigning outputs
identity = Identity;
end

