function [normal, state] = directtfModel(input_2, params, varargin)
%DIRECTTFMODEL Function implementing an imported ONNX network.
%
% THIS FILE WAS AUTO-GENERATED BY importONNXFunction.
% ONNX Operator Set Version: 15
%
% Variable names in this function are taken from the original ONNX file.
%
% [NORMAL] = directtfModel(INPUT_2, PARAMS)
%			- Evaluates the imported ONNX network DIRECTTFMODEL with input(s)
%			INPUT_2 and the imported network parameters in PARAMS. Returns
%			network output(s) in NORMAL.
%
% [NORMAL, STATE] = directtfModel(INPUT_2, PARAMS)
%			- Additionally returns state variables in STATE. When training,
%			use this form and set TRAINING to true.
%
% [__] = directtfModel(INPUT_2, PARAMS, 'NAME1', VAL1, 'NAME2', VAL2, ...)
%			- Specifies additional name-value pairs described below:
%
% 'Training'
% 			Boolean indicating whether the network is being evaluated for
%			prediction or training. If TRAINING is true, state variables
%			will be updated.
%
% 'InputDataPermutation'
%			'auto' - Automatically attempt to determine the permutation
%			 between the dimensions of the input data and the dimensions of
%			the ONNX model input. For example, the permutation from HWCN
%			(MATLAB standard) to NCHW (ONNX standard) uses the vector
%			[4 3 1 2]. See the documentation for IMPORTONNXFUNCTION for
%			more information about automatic permutation.
%
%			'none' - Input(s) are passed in the ONNX model format. See 'Inputs'.
%
%			numeric vector - The permutation vector describing the
%			transformation between input data dimensions and the expected
%			ONNX input dimensions.%
%			cell array - If the network has multiple inputs, each cell
%			contains 'auto', 'none', or a numeric vector.
%
% 'OutputDataPermutation'
%			'auto' - Automatically attempt to determine the permutation
%			between the dimensions of the output and a conventional MATLAB
%			dimension ordering. For example, the permutation from NC (ONNX
%			standard) to CN (MATLAB standard) uses the vector [2 1]. See
%			the documentation for IMPORTONNXFUNCTION for more information
%			about automatic permutation.
%
%			'none' - Return output(s) as given by the ONNX model. See 'Outputs'.
%
%			numeric vector - The permutation vector describing the
%			transformation between the ONNX output dimensions and the
%			desired output dimensions.%
%			cell array - If the network has multiple outputs, each cell
%			contains 'auto', 'none' or a numeric vector.
%
% Inputs:
% -------
% INPUT_2
%			- Input(s) to the ONNX network.
%			  The input size(s) expected by the ONNX file are:
%				  INPUT_2:		[6400, 1]				Type: FLOAT
%			  By default, the function will try to permute the input(s)
%			  into this dimension ordering. If the default is incorrect,
%			  use the 'InputDataPermutation' argument to control the
%			  permutation.
%
%
% PARAMS	- Network parameters returned by 'importONNXFunction'.
%
%
% Outputs:
% --------
% NORMAL
%			- Output(s) of the ONNX network.
%			  Without permutation, the size(s) of the outputs are:
%				  NORMAL:		[6400, 1, 8]				Type: FLOAT
%			  By default, the function will try to permute the output(s)
%			  from this dimension ordering into a conventional MATLAB
%			  ordering. If the default is incorrect, use the
%			  'OutputDataPermutation' argument to control the permutation.
%
% STATE		- (Optional) State variables. When TRAINING is true, these will
% 			  have been updated from the original values in PARAMS.State.
%
%
%  See also importONNXFunction

% Preprocess the input data and arguments:
[input_2, Training, outputDataPerms, anyDlarrayInputs] = preprocessInput(input_2, params, varargin{:});
% Put all variables into a single struct to implement dynamic scoping:
[Vars, NumDims] = packageVariables(params, {'input_2'}, {input_2}, [2]);
% Call the top-level graph function:
[normal, normalNumDims, state] = tf2onnxGraph1000(input_2, NumDims.input_2, Vars, NumDims, Training, params.State);
% Postprocess the output data
[normal] = postprocessOutput(normal, outputDataPerms, anyDlarrayInputs, Training, varargin{:});
end

function [normal, normalNumDims1014, state] = tf2onnxGraph1000(input_2, input_2NumDims1013, Vars, NumDims, Training, state)
% Function implementing the graph 'tf2onnxGraph1000'
% Update Vars and NumDims from the graph's formal input parameters. Note that state variables are already in Vars.
Vars.input_2 = input_2;
NumDims.input_2 = input_2NumDims1013;

% Execute the operators:
% Cast:
Vars.model_Embedding_Cast_0 = cast(int32(extractdata(Vars.input_2)), 'like', Vars.input_2);
NumDims.model_Embedding_Cast_0 = NumDims.input_2;

% Gather:
[Vars.model_Embedding_embedding_lookup_0, NumDims.model_Embedding_embedding_lookup_0] = onnxGather(Vars.model_Embedding_embedding_lookup_91787_0, Vars.model_Embedding_Cast_0, 0, NumDims.model_Embedding_embedding_lookup_91787_0, NumDims.model_Embedding_Cast_0);

% Reshape:
[shape, NumDims.model_reshape_5_Reshape_0] = prepareReshapeArgs(Vars.model_Embedding_embedding_lookup_0, Vars.new_shape__172, NumDims.model_Embedding_embedding_lookup_0, 0);
Vars.model_reshape_5_Reshape_0 = reshape(Vars.model_Embedding_embedding_lookup_0, shape{:});

% Unsqueeze:
[shape, NumDims.model_Conv1D_1_Conv1D_ExpandDims_0] = prepareUnsqueezeArgs(Vars.model_reshape_5_Reshape_0, Vars.const_fold_opt__188, NumDims.model_reshape_5_Reshape_0);
Vars.model_Conv1D_1_Conv1D_ExpandDims_0 = reshape(Vars.model_reshape_5_Reshape_0, shape);

% Reshape:
[shape, NumDims.model_Conv1D_1_Conv1D__107_0] = prepareReshapeArgs(Vars.model_Conv1D_1_Conv1D_ExpandDims_0, Vars.new_shape__168, NumDims.model_Conv1D_1_Conv1D_ExpandDims_0, 0);
Vars.model_Conv1D_1_Conv1D__107_0 = reshape(Vars.model_Conv1D_1_Conv1D_ExpandDims_0, shape{:});

% Conv:
[weights, bias, stride, dilationFactor, padding, dataFormat, NumDims.model_Conv1D_1_Conv1D_0] = prepareConvArgs(Vars.model_Conv1D_1_Conv1D_ExpandDims_1_0, '', Vars.ConvStride1001, Vars.ConvDilationFactor1002, Vars.ConvPadding1003, 1, NumDims.model_Conv1D_1_Conv1D__107_0, NumDims.model_Conv1D_1_Conv1D_ExpandDims_1_0);
Vars.model_Conv1D_1_Conv1D_0 = dlconv(Vars.model_Conv1D_1_Conv1D__107_0, weights, bias, 'Stride', stride, 'DilationFactor', dilationFactor, 'Padding', padding, 'DataFormat', dataFormat);

% Squeeze:
[Vars.model_Conv1D_1_Conv1D_Squeeze_0, NumDims.model_Conv1D_1_Conv1D_Squeeze_0] = onnxSqueeze(Vars.model_Conv1D_1_Conv1D_0, Vars.axes_const__109__132, NumDims.model_Conv1D_1_Conv1D_0);

% Add:
Vars.model_Conv1D_1_BiasAdd_0 = Vars.model_Conv1D_1_Conv1D_Squeeze_0 + Vars.const_fold_opt__192;
NumDims.model_Conv1D_1_BiasAdd_0 = max(NumDims.model_Conv1D_1_Conv1D_Squeeze_0, NumDims.const_fold_opt__192);

% Elu:
[Vars.model_Conv1D_1_Elu_0, NumDims.model_Conv1D_1_Elu_0] = onnxElu(Vars.model_Conv1D_1_BiasAdd_0, 1.000000, NumDims.model_Conv1D_1_BiasAdd_0);

% Reshape:
[shape, NumDims.Transpose__138_0] = prepareReshapeArgs(Vars.model_Conv1D_1_Elu_0, Vars.new_shape__172, NumDims.model_Conv1D_1_Elu_0, 0);
Vars.Transpose__138_0 = reshape(Vars.model_Conv1D_1_Elu_0, shape{:});

% Unsqueeze:
[shape, NumDims.model_Conv1D_2_Conv1D_ExpandDims_0] = prepareUnsqueezeArgs(Vars.Transpose__138_0, Vars.const_fold_opt__188, NumDims.Transpose__138_0);
Vars.model_Conv1D_2_Conv1D_ExpandDims_0 = reshape(Vars.Transpose__138_0, shape);

% Reshape:
[shape, NumDims.model_Conv1D_2_Conv1D__113_0] = prepareReshapeArgs(Vars.model_Conv1D_2_Conv1D_ExpandDims_0, Vars.new_shape__168, NumDims.model_Conv1D_2_Conv1D_ExpandDims_0, 0);
Vars.model_Conv1D_2_Conv1D__113_0 = reshape(Vars.model_Conv1D_2_Conv1D_ExpandDims_0, shape{:});

% Conv:
[weights, bias, stride, dilationFactor, padding, dataFormat, NumDims.model_Conv1D_2_Conv1D_0] = prepareConvArgs(Vars.model_Conv1D_2_Conv1D_ExpandDims_1_0, '', Vars.ConvStride1004, Vars.ConvDilationFactor1005, Vars.ConvPadding1006, 1, NumDims.model_Conv1D_2_Conv1D__113_0, NumDims.model_Conv1D_2_Conv1D_ExpandDims_1_0);
Vars.model_Conv1D_2_Conv1D_0 = dlconv(Vars.model_Conv1D_2_Conv1D__113_0, weights, bias, 'Stride', stride, 'DilationFactor', dilationFactor, 'Padding', padding, 'DataFormat', dataFormat);

% Squeeze:
[Vars.model_Conv1D_2_Conv1D_Squeeze_0, NumDims.model_Conv1D_2_Conv1D_Squeeze_0] = onnxSqueeze(Vars.model_Conv1D_2_Conv1D_0, Vars.axes_const__109__132, NumDims.model_Conv1D_2_Conv1D_0);

% Add:
Vars.model_Conv1D_2_BiasAdd_0 = Vars.model_Conv1D_2_Conv1D_Squeeze_0 + Vars.const_fold_opt__183;
NumDims.model_Conv1D_2_BiasAdd_0 = max(NumDims.model_Conv1D_2_Conv1D_Squeeze_0, NumDims.const_fold_opt__183);

% Elu:
[Vars.model_Conv1D_2_Elu_0, NumDims.model_Conv1D_2_Elu_0] = onnxElu(Vars.model_Conv1D_2_BiasAdd_0, 1.000000, NumDims.model_Conv1D_2_BiasAdd_0);

% Reshape:
[shape, NumDims.Transpose__145_0] = prepareReshapeArgs(Vars.model_Conv1D_2_Elu_0, Vars.new_shape__162, NumDims.model_Conv1D_2_Elu_0, 0);
Vars.Transpose__145_0 = reshape(Vars.model_Conv1D_2_Elu_0, shape{:});

% Unsqueeze:
[shape, NumDims.model_Conv1D_3_Conv1D_ExpandDims_0] = prepareUnsqueezeArgs(Vars.Transpose__145_0, Vars.const_fold_opt__188, NumDims.Transpose__145_0);
Vars.model_Conv1D_3_Conv1D_ExpandDims_0 = reshape(Vars.Transpose__145_0, shape);

% Reshape:
[shape, NumDims.model_Conv1D_3_Conv1D__119_0] = prepareReshapeArgs(Vars.model_Conv1D_3_Conv1D_ExpandDims_0, Vars.new_shape__194, NumDims.model_Conv1D_3_Conv1D_ExpandDims_0, 0);
Vars.model_Conv1D_3_Conv1D__119_0 = reshape(Vars.model_Conv1D_3_Conv1D_ExpandDims_0, shape{:});

% Conv:
[weights, bias, stride, dilationFactor, padding, dataFormat, NumDims.model_Conv1D_3_Conv1D_0] = prepareConvArgs(Vars.model_Conv1D_3_Conv1D_ExpandDims_1_0, '', Vars.ConvStride1007, Vars.ConvDilationFactor1008, Vars.ConvPadding1009, 1, NumDims.model_Conv1D_3_Conv1D__119_0, NumDims.model_Conv1D_3_Conv1D_ExpandDims_1_0);
Vars.model_Conv1D_3_Conv1D_0 = dlconv(Vars.model_Conv1D_3_Conv1D__119_0, weights, bias, 'Stride', stride, 'DilationFactor', dilationFactor, 'Padding', padding, 'DataFormat', dataFormat);

% Squeeze:
[Vars.model_Conv1D_3_Conv1D_Squeeze_0, NumDims.model_Conv1D_3_Conv1D_Squeeze_0] = onnxSqueeze(Vars.model_Conv1D_3_Conv1D_0, Vars.axes_const__109__132, NumDims.model_Conv1D_3_Conv1D_0);

% Add:
Vars.model_Conv1D_3_BiasAdd_0 = Vars.model_Conv1D_3_Conv1D_Squeeze_0 + Vars.const_fold_opt__184;
NumDims.model_Conv1D_3_BiasAdd_0 = max(NumDims.model_Conv1D_3_Conv1D_Squeeze_0, NumDims.const_fold_opt__184);

% Elu:
[Vars.model_Conv1D_3_Elu_0, NumDims.model_Conv1D_3_Elu_0] = onnxElu(Vars.model_Conv1D_3_BiasAdd_0, 1.000000, NumDims.model_Conv1D_3_BiasAdd_0);

% Reshape:
[shape, NumDims.Transpose__152_0] = prepareReshapeArgs(Vars.model_Conv1D_3_Elu_0, Vars.new_shape__170, NumDims.model_Conv1D_3_Elu_0, 0);
Vars.Transpose__152_0 = reshape(Vars.model_Conv1D_3_Elu_0, shape{:});

% Unsqueeze:
[shape, NumDims.model_Conv1D_4_Conv1D_ExpandDims_0] = prepareUnsqueezeArgs(Vars.Transpose__152_0, Vars.const_fold_opt__188, NumDims.Transpose__152_0);
Vars.model_Conv1D_4_Conv1D_ExpandDims_0 = reshape(Vars.Transpose__152_0, shape);

% Reshape:
[shape, NumDims.model_Conv1D_4_Conv1D__125_0] = prepareReshapeArgs(Vars.model_Conv1D_4_Conv1D_ExpandDims_0, Vars.new_shape__164, NumDims.model_Conv1D_4_Conv1D_ExpandDims_0, 0);
Vars.model_Conv1D_4_Conv1D__125_0 = reshape(Vars.model_Conv1D_4_Conv1D_ExpandDims_0, shape{:});

% Conv:
[weights, bias, stride, dilationFactor, padding, dataFormat, NumDims.model_Conv1D_4_Conv1D_0] = prepareConvArgs(Vars.model_Conv1D_4_Conv1D_ExpandDims_1_0, '', Vars.ConvStride1010, Vars.ConvDilationFactor1011, Vars.ConvPadding1012, 1, NumDims.model_Conv1D_4_Conv1D__125_0, NumDims.model_Conv1D_4_Conv1D_ExpandDims_1_0);
Vars.model_Conv1D_4_Conv1D_0 = dlconv(Vars.model_Conv1D_4_Conv1D__125_0, weights, bias, 'Stride', stride, 'DilationFactor', dilationFactor, 'Padding', padding, 'DataFormat', dataFormat);

% Squeeze:
[Vars.model_Conv1D_4_Conv1D_Squeeze_0, NumDims.model_Conv1D_4_Conv1D_Squeeze_0] = onnxSqueeze(Vars.model_Conv1D_4_Conv1D_0, Vars.axes_const__109__132, NumDims.model_Conv1D_4_Conv1D_0);

% Add:
Vars.model_Conv1D_4_BiasAdd_0 = Vars.model_Conv1D_4_Conv1D_Squeeze_0 + Vars.const_fold_opt__185;
NumDims.model_Conv1D_4_BiasAdd_0 = max(NumDims.model_Conv1D_4_Conv1D_Squeeze_0, NumDims.const_fold_opt__185);

% Mul:
Vars.model_normal_l2_normalize_Square_0 = Vars.model_Conv1D_4_BiasAdd_0 .* Vars.model_Conv1D_4_BiasAdd_0;
NumDims.model_normal_l2_normalize_Square_0 = max(NumDims.model_Conv1D_4_BiasAdd_0, NumDims.model_Conv1D_4_BiasAdd_0);

% Reshape:
[shape, NumDims.Transpose__159_0] = prepareReshapeArgs(Vars.model_normal_l2_normalize_Square_0, Vars.new_shape__166, NumDims.model_normal_l2_normalize_Square_0, 0);
Vars.Transpose__159_0 = reshape(Vars.model_normal_l2_normalize_Square_0, shape{:});

% ReduceSum:
dims = prepareReduceArgs(Vars.const_fold_opt__191, NumDims.Transpose__159_0);
Vars.model_normal_l2_normalize_Sum_0 = sum(Vars.Transpose__159_0, dims);
NumDims.model_normal_l2_normalize_Sum_0 = NumDims.Transpose__159_0;

% Max:
[Vars.model_normal_l2_normalize_Maximum_0, NumDims.model_normal_l2_normalize_Maximum_0] = onnxMax({Vars.model_normal_l2_normalize_Sum_0, Vars.model_normal_l2_normalize_Maximum_y_0}, [NumDims.model_normal_l2_normalize_Sum_0, NumDims.model_normal_l2_normalize_Maximum_y_0]);

% Sqrt:
Vars.model_normal_l2_normalize_Rsqrt_0 = sqrt(Vars.model_normal_l2_normalize_Maximum_0);
NumDims.model_normal_l2_normalize_Rsqrt_0 = NumDims.model_normal_l2_normalize_Maximum_0;

% Reciprocal:
Vars.model_normal_l2_normalize_Rsqrt__131_0 = 1./(Vars.model_normal_l2_normalize_Rsqrt_0);
NumDims.model_normal_l2_normalize_Rsqrt__131_0 = NumDims.model_normal_l2_normalize_Rsqrt_0;

% Reshape:
[shape, NumDims.Transpose__161_0] = prepareReshapeArgs(Vars.model_Conv1D_4_BiasAdd_0, Vars.new_shape__171, NumDims.model_Conv1D_4_BiasAdd_0, 0);
Vars.Transpose__161_0 = reshape(Vars.model_Conv1D_4_BiasAdd_0, shape{:});

% Mul:
Vars.normal = Vars.Transpose__161_0 .* Vars.model_normal_l2_normalize_Rsqrt__131_0;
NumDims.normal = max(NumDims.Transpose__161_0, NumDims.model_normal_l2_normalize_Rsqrt__131_0);

% Set graph output arguments from Vars and NumDims:
normal = Vars.normal;
normalNumDims1014 = NumDims.normal;
% Set output state from Vars:
state = updateStruct(state, Vars);
end

function [inputDataPerms, outputDataPerms, Training] = parseInputs(input_2, numDataOutputs, params, varargin)
% Function to validate inputs to directtfModel:
p = inputParser;
isValidArrayInput = @(x)isnumeric(x) || isstring(x);
isValidONNXParameters = @(x)isa(x, 'ONNXParameters');
addRequired(p, 'input_2', isValidArrayInput);
addRequired(p, 'params', isValidONNXParameters);
addParameter(p, 'InputDataPermutation', 'auto');
addParameter(p, 'OutputDataPermutation', 'auto');
addParameter(p, 'Training', false);
parse(p, input_2, params, varargin{:});
inputDataPerms = p.Results.InputDataPermutation;
outputDataPerms = p.Results.OutputDataPermutation;
Training = p.Results.Training;
if isnumeric(inputDataPerms)
    inputDataPerms = {inputDataPerms};
end
if isstring(inputDataPerms) && isscalar(inputDataPerms) || ischar(inputDataPerms)
    inputDataPerms = repmat({inputDataPerms},1,1);
end
if isnumeric(outputDataPerms)
    outputDataPerms = {outputDataPerms};
end
if isstring(outputDataPerms) && isscalar(outputDataPerms) || ischar(outputDataPerms)
    outputDataPerms = repmat({outputDataPerms},1,numDataOutputs);
end
end

function [input_2, Training, outputDataPerms, anyDlarrayInputs] = preprocessInput(input_2, params, varargin)
% Parse input arguments
[inputDataPerms, outputDataPerms, Training] = parseInputs(input_2, 1, params, varargin{:});
anyDlarrayInputs = any(cellfun(@(x)isa(x, 'dlarray'), {input_2}));
% Make the input variables into unlabelled dlarrays:
input_2 = makeUnlabeledDlarray(input_2);
% Permute inputs if requested:
input_2 = permuteInputVar(input_2, inputDataPerms{1}, 2);
% Check input size(s):
checkInputSize(size(input_2), {6400 1}, "input_2");
end

function [normal] = postprocessOutput(normal, outputDataPerms, anyDlarrayInputs, Training, varargin)
% Set output type:
if ~anyDlarrayInputs && ~Training
    if isdlarray(normal)
        normal = extractdata(normal);
    end
end
% Permute outputs if requested:
normal = permuteOutputVar(normal, outputDataPerms{1}, 3);
end


%% dlarray functions implementing ONNX operators:

function [X, numDimsX] = onnxElu(X, alpha, numDimsX)
% Implements the ONNX Elu operator
X(X<=0) = alpha*(exp(X(X<=0))-1);
end

function [Y, numDimsY] = onnxGather(X, ONNXIdx, ONNXAxis, numDimsX, numDimsIdx)
% Function implementing the ONNX Gather operator

% In ONNX, 'Gather' first indexes into dimension ONNXAxis of data, using
% the contents of ONNXIdx as the indices. Then, it reshapes the ONNXAxis
% into the shape of ONNXIdx.
%   Example 1:
% Suppose data has shape [2 3 4 5], ONNXIdx has shape [6 7], and axis=1.
% The result has shape [2 6 7 4 5].
%   Example 2:
% Suppose data has shape [2 3 4 5], ONNXIdx has shape [6], and axis=1.
% The result has shape [2 6 4 5].
%   Example 3:
% Suppose data has shape [2 3 4 5], ONNXIdx has shape [] (a scalar), and axis=1.
% The result has shape [2 4 5].
%
% Since we're using reverse indexing relative to ONNX, in this function
% data and ONNXIdx both have reversed dimension ordering.
numDimsY = numDimsIdx + (numDimsX - 1);
if isempty(X)
    Y = X;
    return;
end
% (1) First, do the subsref part of Gather
if ONNXAxis<0
    ONNXAxis = ONNXAxis + numDimsX;                                 % Axis can be negative. Convert it to its positive equivalent.
end
dltAxis = numDimsX - ONNXAxis;                                      % Convert axis to DLT. ONNXAxis is origin 0 and we index from the end
ONNXIdx(ONNXIdx<0) = ONNXIdx(ONNXIdx<0) + size(X, dltAxis);         % ONNXIdx can have negative components. Make them positive.
dltIdx  = extractdata(ONNXIdx) + 1;                                 % ONNXIdx is origin-0 in ONNX, so add 1 to get dltIdx
% Use subsref to index into data
Indices.subs = repmat({':'}, 1, numDimsX);
Indices.subs{dltAxis} = dltIdx(:);                                  % Index as a column to ensure the output is 1-D in the indexed dimension (for now).
Indices.type = '()';
Y = subsref(X, Indices);
% (2) Now do the reshaping part of Gather
shape = size(Y, 1:numDimsX);
if numDimsIdx == 0
    % Delete the indexed dimension
    shape(dltAxis) = [];
elseif numDimsIdx > 1
    % Reshape the indexed dimension into the shape of ONNXIdx
    shape = [shape(1:dltAxis-1) size(ONNXIdx, 1:numDimsIdx) shape(dltAxis+1:end)];
end
% Extend the shape to 2D so it's valid MATLAB
if numel(shape) < 2
    shape = [shape ones(1,2-numel(shape))];
end
Y = reshape(Y, shape);
end

function [Y, numDimsY] = onnxMax(XCell, numDimsXArray)
% Elementwise max with implicit expansion
Y = XCell{1};
for i=2:numel(XCell)
    Y = max(Y, XCell{i});   % implicit expansion done here.
end
numDimsY = max(numDimsXArray);
end

function [Y, numDimsY] = onnxSqueeze(X, ONNXAxes, numDimsX)
% Implements the ONNX Squeeze operator
if numDimsX == 0
    Y = X;
    numDimsY = numDimsX;
else
    % Find the new ONNX shape
    curOShape = size(X, numDimsX:-1:1);
    if isempty(ONNXAxes)
        newOShape = curOShape(curOShape ~= 1);
    else
        ONNXAxes(ONNXAxes<0) = ONNXAxes(ONNXAxes<0) + numDimsX;
        newOShape = curOShape;
        newOShape(ONNXAxes+1) = [];
    end
    % Get numDimsY from ONNX shape
    numDimsY  = numel(newOShape);
    newMShape = [fliplr(newOShape) ones(1, 2-numDimsY)];    % Append 1's to shape if numDims<2
    Y         = reshape(X, newMShape);
end
end

function [weights, bias, stride, dilationFactor, padding, dataFormat, numDimsY] = prepareConvArgs(...
    weights, bias, stride, dilationFactor, padding, numWtGroups, numDimsX, numDimsW)
% Prepares arguments for implementing the ONNX Conv operator

% Weights: The ONNX weight dim is Fcxyz..., where c=C/G, G is numGroups,
% and xyz... are spatial dimensions. DLT "weights" here is the flip of
% that, or ...zyxcF. dlconv requires ...zyxcfG, where f=F/G. So reshape to
% split the last dimension.
sizeW    = size(weights, 1:numDimsW);
F        = sizeW(end);
newWSize = [sizeW(1:numDimsW-1), F/numWtGroups, numWtGroups];
weights  = reshape(weights, newWSize);
% bias
if isempty(bias)
    bias = 0;
end
bias = dlarray(bias(:),'CU');
% Derive missing default attributes from weight tensor
numSpatialDims = numDimsW-2;
if isempty(padding)
    padding = zeros(1, 2*numSpatialDims);
end
if isempty(stride)
    stride = ones(1,numSpatialDims);
end
if isempty(dilationFactor)
    dilationFactor = ones(1,numSpatialDims);
end
% Make the attributes non-dlarrays:
if isa(stride, 'dlarray')
    stride = extractdata(stride);
end
if isa(dilationFactor, 'dlarray')
    dilationFactor = extractdata(dilationFactor);
end
if isa(padding, 'dlarray')
    padding = extractdata(padding);
end
% Make the attributes double row vectors, and flip their dimension ordering
% to reverse-onnx:
stride = fliplr(double(stride(:)'));
dilationFactor = fliplr(double(dilationFactor(:)'));
if isnumeric(padding)       % padding can be "same"
    % ONNX: [x1_begin, ..., xn_begin, x1_end, ...,xn_end]
    % DLT:  [xn_begin, ..., x1_begin;
    %        xn_end, ..., x1_end]       (Note the lrflip and semicolon)
    padding = fliplr(transpose(reshape(padding, [], 2)));
end
% Set dataformat and numdims
dataFormat = [repmat('S', 1, numDimsX-2) 'CB'];
numDimsY = numDimsX;
end

function dims = prepareReduceArgs(ONNXAxes, numDimsX)
% Prepares arguments for implementing the ONNX Reduce operator
if isempty(ONNXAxes)
    ONNXAxes = 0:numDimsX-1;   % All axes
end
ONNXAxes(ONNXAxes<0) = ONNXAxes(ONNXAxes<0) + numDimsX;
dims = numDimsX - ONNXAxes;
end

function [DLTShape, numDimsY] = prepareReshapeArgs(X, ONNXShape, numDimsX, allowzero)
% Prepares arguments for implementing the ONNX Reshape operator
ONNXShape = flip(extractdata(ONNXShape));            % First flip the shape to make it correspond to the dimensions of X.
% In ONNX, 0 means "unchanged" if allowzero is false, and -1 means "infer". In DLT, there is no
% "unchanged", and [] means "infer".
DLTShape = num2cell(ONNXShape);                      % Make a cell array so we can include [].
% Replace zeros with the actual size if allowzero is true
if any(ONNXShape==0) && allowzero==0
    i0 = find(ONNXShape==0);
    DLTShape(i0) = num2cell(size(X, numDimsX - numel(ONNXShape) + i0));  % right-align the shape vector and dims
end
if any(ONNXShape == -1)
    % Replace -1 with []
    i = ONNXShape == -1;
    DLTShape{i} = [];
end
if numel(DLTShape)==1
    DLTShape = [DLTShape 1];
end
numDimsY = numel(ONNXShape);
end

function [newShape, numDimsY] = prepareUnsqueezeArgs(X, ONNXAxes, numDimsX)
% Prepares arguments for implementing the ONNX Unsqueeze operator
numDimsY = numDimsX + numel(ONNXAxes);
ONNXAxes = extractdata(ONNXAxes);
ONNXAxes(ONNXAxes<0) = ONNXAxes(ONNXAxes<0) + numDimsY;
ONNXAxes = sort(ONNXAxes);                                              % increasing order
if numDimsY == 1
    newShape = size(X);
else
    DLTAxes  = flip(numDimsY - ONNXAxes);                                  % increasing order
    newShape = ones(1, numDimsY);
    posToSet = setdiff(1:numDimsY, DLTAxes, 'stable');
    newShape(posToSet) = size(X, 1:numel(posToSet));
end
end

%% Utility functions:

function s = appendStructs(varargin)
% s = appendStructs(s1, s2,...). Assign all fields in s1, s2,... into s.
if isempty(varargin)
    s = struct;
else
    s = varargin{1};
    for i = 2:numel(varargin)
        fromstr = varargin{i};
        fs = fieldnames(fromstr);
        for j = 1:numel(fs)
            s.(fs{j}) = fromstr.(fs{j});
        end
    end
end
end

function checkInputSize(inputShape, expectedShape, inputName)

if numel(expectedShape)==0
    % The input is a scalar
    if ~isequal(inputShape, [1 1])
        inputSizeStr = makeSizeString(inputShape);
        error(message('nnet_cnn_onnx:onnx:InputNeedsResize',inputName, "[1,1]", inputSizeStr));
    end
elseif numel(expectedShape)==1
    % The input is a vector
    if ~shapeIsColumnVector(inputShape) || ~iSizesMatch({inputShape(1)}, expectedShape)
        expectedShape{2} = 1;
        expectedSizeStr = makeSizeString(expectedShape);
        inputSizeStr = makeSizeString(inputShape);
        error(message('nnet_cnn_onnx:onnx:InputNeedsResize',inputName, expectedSizeStr, inputSizeStr));
    end
else
    % The input has 2 dimensions or more
    
    % The input dimensions have been reversed; flip them back to compare to the
    % expected ONNX shape.
    inputShape = fliplr(inputShape);
    
    % If the expected shape has fewer dims than the input shape, error.
    if numel(expectedShape) < numel(inputShape)
        expectedSizeStr = strjoin(["[", strjoin(string(expectedShape), ","), "]"], "");
        error(message('nnet_cnn_onnx:onnx:InputHasGreaterNDims', inputName, expectedSizeStr));
    end
    
    % Prepad the input shape with trailing ones up to the number of elements in
    % expectedShape
    inputShape = num2cell([ones(1, numel(expectedShape) - length(inputShape)) inputShape]);
    
    % Find the number of variable size dimensions in the expected shape
    numVariableInputs = sum(cellfun(@(x) isa(x, 'char') || isa(x, 'string'), expectedShape));
    
    % Find the number of input dimensions that are not in the expected shape
    % and cannot be represented by a variable dimension
    nonMatchingInputDims = setdiff(string(inputShape), string(expectedShape));
    numNonMatchingInputDims  = numel(nonMatchingInputDims) - numVariableInputs;
    
    expectedSizeStr = makeSizeString(expectedShape);
    inputSizeStr = makeSizeString(inputShape);
    if numNonMatchingInputDims == 0 && ~iSizesMatch(inputShape, expectedShape)
        % The actual and expected input dimensions match, but in
        % a different order. The input needs to be permuted.
        error(message('nnet_cnn_onnx:onnx:InputNeedsPermute',inputName, expectedSizeStr, inputSizeStr));
    elseif numNonMatchingInputDims > 0
        % The actual and expected input sizes do not match.
        error(message('nnet_cnn_onnx:onnx:InputNeedsResize',inputName, expectedSizeStr, inputSizeStr));
    end
end
end

function doesMatch = iSizesMatch(inputShape, expectedShape)
% Check whether the input and expected shapes match, in order.
% Size elements match if (1) the elements are equal, or (2) the expected
% size element is a variable (represented by a character vector or string)
doesMatch = true;
for i=1:numel(inputShape)
    if ~(isequal(inputShape{i},expectedShape{i}) || ischar(expectedShape{i}) || isstring(expectedShape{i}))
        doesMatch = false;
        return
    end
end
end

function sizeStr = makeSizeString(shape)
sizeStr = strjoin(["[", strjoin(string(shape), ","), "]"], "");
end

function isVec = shapeIsColumnVector(shape)
if numel(shape) == 2 && shape(2) == 1
    isVec = true;
else
    isVec = false;
end
end
function X = makeUnlabeledDlarray(X)
% Make numeric X into an unlabelled dlarray
if isa(X, 'dlarray')
    X = stripdims(X);
elseif isnumeric(X)
    if isinteger(X)
        % Make ints double so they can combine with anything without
        % reducing precision
        X = double(X);
    end
    X = dlarray(X);
end
end

function [Vars, NumDims] = packageVariables(params, inputNames, inputValues, inputNumDims)
% inputNames, inputValues are cell arrays. inputRanks is a numeric vector.
Vars = appendStructs(params.Learnables, params.Nonlearnables, params.State);
NumDims = params.NumDimensions;
% Add graph inputs
for i = 1:numel(inputNames)
    Vars.(inputNames{i}) = inputValues{i};
    NumDims.(inputNames{i}) = inputNumDims(i);
end
end

function X = permuteInputVar(X, userDataPerm, onnxNDims)
% Returns reverse-ONNX ordering
if onnxNDims == 0
    return;
elseif onnxNDims == 1 && isvector(X)
    X = X(:);
    return;
elseif isnumeric(userDataPerm)
    % Permute into reverse ONNX ordering
    if numel(userDataPerm) ~= onnxNDims
        error(message('nnet_cnn_onnx:onnx:InputPermutationSize', numel(userDataPerm), onnxNDims));
    end
    perm = fliplr(userDataPerm);
elseif isequal(userDataPerm, 'auto') && onnxNDims == 4
    % Permute MATLAB HWCN to reverse onnx (WHCN)
    perm = [2 1 3 4];
elseif isequal(userDataPerm, 'as-is')
    % Do not permute the input
    perm = 1:ndims(X);
else
    % userDataPerm is either 'none' or 'auto' with no default, which means
    % it's already in onnx ordering, so just make it reverse onnx
    perm = max(2,onnxNDims):-1:1;
end
X = permute(X, perm);
end

function Y = permuteOutputVar(Y, userDataPerm, onnxNDims)
switch onnxNDims
    case 0
        perm = [];
    case 1
        if isnumeric(userDataPerm)
            % Use the user's permutation because Y is a column vector which
            % already matches ONNX.
            perm = userDataPerm;
        elseif isequal(userDataPerm, 'auto')
            % Treat the 1D onnx vector as a 2D column and transpose it
            perm = [2 1];
        else
            % userDataPerm is 'none'. Leave Y alone because it already
            % matches onnx.
            perm = [];
        end
    otherwise
        % ndims >= 2
        if isnumeric(userDataPerm)
            % Use the inverse of the user's permutation. This is not just the
            % flip of the permutation vector.
            perm = onnxNDims + 1 - userDataPerm;
        elseif isequal(userDataPerm, 'auto')
            if onnxNDims == 2
                % Permute reverse ONNX CN to DLT CN (do nothing)
                perm = [];
            elseif onnxNDims == 4
                % Permute reverse onnx (WHCN) to MATLAB HWCN
                perm = [2 1 3 4];
            else
                % User wants the output in ONNX ordering, so just reverse it from
                % reverse onnx
                perm = onnxNDims:-1:1;
            end
        elseif isequal(userDataPerm, 'as-is')
            % Do not permute the input
            perm = 1:ndims(Y);
        else
            % userDataPerm is 'none', so just make it reverse onnx
            perm = onnxNDims:-1:1;
        end
end
if ~isempty(perm)
    Y = permute(Y, perm);
end
end

function s = updateStruct(s, t)
% Set all existing fields in s from fields in t, ignoring extra fields in t.
for name = transpose(fieldnames(s))
    s.(name{1}) = t.(name{1});
end
end
